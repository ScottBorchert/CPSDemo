trigger:
  branches:
    include:
    - main # Replace with your branch name if different

pool:
  vmImage: 'ubuntu-latest'

variables:
  node_version: '16.x'

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '$(node_version)'
  displayName: 'Install Node.js'
# Add Azure login action
- task: AzureCLI@2
  displayName: 'Azure Login'
  inputs:
    azureSubscription: '<Your-Azure-Subscription-Name>'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az login --service-principal --username "$(CLIENT_ID)" --password "$(CLIENT_SECRET)" --tenant "$(TENANT_ID)"

# Update the webapps-deploy action
- task: azure/webapps-deploy@v2
  displayName: 'Deploy to Azure Web App'
  inputs:
    app-name: 'CPSDemo1'
    slot-name: 'Production'
    package: '/home/runner/work/CPSDemo/CPSDemo/dist'

- script: |
    npm ci
    npm run build -- --prod
  displayName: 'Install dependencies and build Angular project'

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: 'dist' # The path where the dist folder is located
    artifactName: 'drop'


# This is an `azure-pipelines.yml` file used to configure a Continuous Integration (CI) pipeline for an Azure DevOps project. The file is written in YAML (Yet Another Markup Language) format, which is a human-readable data serialization language. This specific pipeline is designed for an Angular project using Node.js.
#
# Let's break down the code into sections:
#
#1. `trigger`: This section defines the triggering conditions for the pipeline.
#   - `branches`: Specifies which branches in the repository will trigger a pipeline run.
#     - `include`: Lists the branches that should trigger the pipeline.
#       - `- main`: Specifies that the pipeline will run whenever a new commit is pushed to the `main` branch. You can replace `main` with the name of your branch if it's different.
#
#2. `pool`: This section specifies the type of virtual machine (VM) used for the pipeline.
#   - `vmImage`: Specifies the VM image to be used. In this case, it's set to 'ubuntu-latest', which means the pipeline will run on the latest available version of Ubuntu.
#
#3. `variables`: This section defines variables that can be used throughout the pipeline.
#   - `node_version`: Specifies the version of Node.js to be used (in this case, version 14.x).
#
#4. `steps`: This section lists the steps that the pipeline will execute in sequence.
#   - `- task: NodeTool@0`: This step uses the NodeTool task to install the specified version of Node.js on the build agent.
#     - `inputs`: Provides input parameters for the task.
#       - `versionSpec`: Sets the desired Node.js version using the variable `$(node_version)`.
#     - `displayName`: Provides a human-readable name for the task, which will be displayed in the pipeline logs.
#
#   - `- script`: This step runs a set of commands as a script.
#     - `|`: Indicates that the following lines are part of a multi-line string.
#       - `npm ci`: Installs the project's dependencies using the locked versions in the `package-lock.json` file.
#       - `npm run build -- --prod`: Builds the Angular project in production mode.
#     - `displayName`: Provides a human-readable name for the script step.
#
#   - `- task: PublishBuildArtifacts@1`: This step publishes build artifacts (output files) to the pipeline, making them available for download or further use.
#     - `inputs`: Provides input parameters for the task.
#       - `pathtoPublish`: Specifies the path to the folder containing the artifacts to publish, in this case, the 'dist' folder.
#       - `artifactName`: Sets the name of the artifact, which will be used for identification purposes. In this case, it's named 'drop'.